#!/usr/bin/env python3
import sys, os, re, pickle, argparse
#-----------------------------------------------------#
#--------------Error Messages-------------------------#
#-----------------------------------------------------#
if not os.path.exists(".grip"):
	print("grip-rm: error: grip repository directory .grip not found", file=sys.stderr)
	sys.exit(1)

parser = argparse.ArgumentParser(
	usage='grip-rm [--force] [--cached] <filenames>',
	add_help=False
)	
parser.add_argument('--force', action='store_true')
parser.add_argument('--cached', action='store_true')
parser.add_argument('filenames', nargs='*')

args = parser.parse_args()
if not args.filenames:
	parser.print_usage()
	sys.exit(1)

def error_resaon(filename, contents):
	file = open(filename, 'r').read()
	if file != contents[filename][0]:
		if contents[filename][1]: #Staged
			print(f"grip-rm: error: '{filename}' in index is different to both the working file and the repository", file=sys.stderr)
			sys.exit(1)
		else: #Not Staged
			print(f"grip-rm: error: '{filename}' in the repository is different to the working file", file=sys.stderr)
			sys.exit(1)
	
	if contents[filename][1]: #Staged
			print(f"grip-rm: error: '{filename}' has staged changes in the index", file=sys.stderr)
			sys.exit(1)
#-----------------------------------------------------#
#----------------Remove Files-------------------------#
#-----------------------------------------------------#
def remove_file(filename, contents):
	if not re.match(r"[a-zA-Z0-9][a-zA-Z0-9.\-_]*", filename):
		print(f"grip-add: error: invalid filename '{filename}'", file=sys.stderr)
		sys.exit(1)

	if filename not in contents:
		print(f"grip-rm: error: '{filename}' is not in the grip repository", file=sys.stderr)
		sys.exit(1)

	#1. Cached Option
	if args.cached:
		file = open(filename, 'r').read()
		if not args.force and contents[filename][1] and contents[filename][0] != file: #Staged and different
			print(f"grip-rm: error: '{filename}' in index is different to both the working file and the repository", file=sys.stderr)
			sys.exit(1)
		#delete from index
		del contents[filename]
		contents['@Files'].remove(filename)
		return
	
	#2. Normal Option
	#Staged file
	if not args.force and contents["@Staged"]: 
		error_resaon(filename, contents)
	
	del contents[filename]
	contents['@Files'].remove(filename)
	if os.path.exists(filename):
		os.remove(filename)

index_path = '.grip/index'
if os.path.exists(index_path):
	index = open(index_path, 'rb')
	contents = pickle.load(index)

	for filename in args.filenames:
		remove_file(filename, contents)
		contents["@Changed"] = True

	index = open(index_path, 'wb')
	pickle.dump(contents, index)
	index.close()
else:
	print(f"grip-rm: error: '{args.filenames[0]}' is not in the grip repository", file=sys.stderr)
	sys.exit(1)
