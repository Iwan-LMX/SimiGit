#!/usr/bin/env python3
import sys, os, re, pickle, argparse
#-----------------------------------------------------#
#--------------Error Messages-------------------------#
#-----------------------------------------------------#
if not os.path.exists(".grip"):
	print("grip-branch: error: grip repository directory .grip not found", file=sys.stderr)
	sys.exit(1)

parser = argparse.ArgumentParser(
	usage='grip-branch [-d] <branch>',
	add_help=False
)	
parser.add_argument('-d', '--delete', action='store_true') #delete branch
parser.add_argument('branch', nargs='?')
args = parser.parse_args()
BRANCH_PATH = '.grip/logs/refs/heads'


if not os.path.exists(BRANCH_PATH):
	print(f"grip-branch: error: this command can not be run until after the first commit", file=sys.stderr)
	sys.exit(1)

#-----------------------------------------------------#
#--------------Process branches-----------------------#
#-----------------------------------------------------#
def create_branch(branch):
	index_path = '.grip/index'
	index = open(index_path, 'rb'); save = open(branch, 'wb')
	files = pickle.load(index); 	pickle.dump(files, save)
#Show branch
if not args.branch:
	branches = os.listdir(BRANCH_PATH)
	for branch in sorted(branches):
		print(branch)
 
#Delete or create branch
else:
	if not re.match(r'^(?!/|.*([/.]\.|//|@\{|\\))[^\000-\037\177 ~^:?*[]+(?<!/)$', args.branch):
		print(f"grip-branch: error: invalid branch name '{args.branch}'", file=sys.stderr)
		sys.exit(1)
	
	branch = os.path.join(BRANCH_PATH, args.branch)
	if args.delete:
		if not os.path.exists(branch):
			print(f"grip-branch: error: branch '{args.branch}' doesn't exist", file=sys.stderr)
			sys.exit(1)
		
		if args.branch == 'trunk': #Current branch
			print(f"grip-branch: error: can not delete branch '{args.branch}': default branch", file=sys.stderr)
			sys.exit(1)
		#Delete
		os.remove(branch)
		print(f"Deleted branch '{args.branch}'")
	
	else:
		if os.path.exists(branch):
			print(f"grip-branch: error: branch '{args.branch}' already exists", file=sys.stderr)
			sys.exit(1)
		
		#Create
		create_branch(branch)