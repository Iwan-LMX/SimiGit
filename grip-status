#!/usr/bin/env python3
import sys, os, re, pickle
#-----------------------------------------------------#
#--------------Error Messages-------------------------#
#-----------------------------------------------------#
if not os.path.exists(".grip"):
	print("grip-status: error: grip repository directory .grip not found", file=sys.stderr)
	sys.exit(1)
	
if len(sys.argv) != 1:
	print("usage: grip-status", file=sys.stderr)
	sys.exit(1)

#-----------------------------------------------------#
#------------------Load Files-------------------------#
#-----------------------------------------------------#
curr_files = set()
for filename in os.listdir():
	if re.match(r"[a-zA-Z0-9][a-zA-Z0-9.\-_]*", filename):
		curr_files.add(filename)

files = curr_files.copy()
index_path = '.grip/index'
if os.path.exists(index_path):
	index = open(index_path, 'rb')
	contents = pickle.load(index)
	files = curr_files.union(contents['@Files'])
	
#-----------------------------------------------------#
#---------------Check Files Status--------------------#
#-----------------------------------------------------#
def check_status(filename, contents, index_files, curr_files):
	#Untracked
	if filename not in index_files:
		print(f'{filename} - untracked');	return

	#Deleted both from folder and index
	if filename not in curr_files: 
		if filename not in contents:
			print(f'{filename} - file deleted, deleted from index');	return
		#Deleted
		else:
			print(f'{filename} - file deleted'); return

	#In index, deleted in folder
	if filename not in contents:
		print(f'{filename} - deleted from index'); return
	
	#Change and Stage
	content = contents[filename]
	if content[0] != open(filename, 'r').read(): #Changed
		if content[1]: # Staged
			print(f'{filename} - file changed, changes staged for commit'); return
		else: #Not Staged
			print(f'{filename} - file changed, changes not staged for commit'); return
		
	else: #Not Changed
		if content[1]: # Staged
			print(f'{filename} - added to index'); return
		else: #Not Staged
			print(f'{filename} - same as repo'); return


if os.path.exists(index_path):
	index = open(index_path, 'rb')
	contents = pickle.load(index)
	index_files = contents['@Files']
	
	for filename in sorted(files):
		check_status(filename, contents, index_files, curr_files)
	
else:
	for filename in files:
		print(f'{filename} - untracked')